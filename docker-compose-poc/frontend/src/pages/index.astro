---
const backendUrl = 'http://localhost:8000';
const backendResponse = await fetch(`${backendUrl}/health`).catch((e) => {
  console.error(`Could not obtain response from backend. Error:\n${e}`);
  return null;
});
const message = backendResponse ? await backendResponse.text() : 'Backend not available';

const usersResponse = await fetch(`${backendUrl}/users`).catch((e) => {
  console.error(`Could not obtain users from backend. Error:\n${e}`);
  null;
});

let users = [];
let usersError = null;

if (usersResponse) {
    try {
        const usersText = await usersResponse.text();
        users = JSON.parse(usersText);
    } catch (error) {
        usersError = 'Failed to fetch users data';
    }
} else {
    usersError = 'Cannot connect to database';
}
---

<html lang="en">
<head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Dummy Frontend</title>
</head>
<body>
    <main>
        <h1>Hello from Astro Frontend!</h1>
        <p>This is a dummy Astro frontend running in Docker.</p>

        <div>
            <h2>Backend Status:</h2>
            <p>{message}</p>
        </div>

        <div>
            <h2>Database Users:</h2>
            {usersError ? (
                <p class="error">{usersError}</p>
            ) : (
                <div class="users-container">
                    {users.length === 0 ? (
                        <p>No users found in database</p>
                    ) : (
                        <table class="users-table">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Name</th>
                                    <th>Email</th>
                                    <th>Created</th>
                                </tr>
                            </thead>
                            <tbody>
                                {users.map((user: any) => (
                                    <tr>
                                        <td>{user.id}</td>
                                        <td>{user.name}</td>
                                        <td>{user.email}</td>
                                        <td>{new Date(user.created_at).toLocaleDateString()}</td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    )}
                </div>
            )}
        </div>
    </main>
</body>
</html>

<style>
    body {
        font-family: Arial, sans-serif;
        max-width: 800px;
        margin: 0 auto;
        padding: 2rem;
        background: #f0f0f0;
    }

    main {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    h1 {
        color: #333;
        border-bottom: 2px solid #007acc;
        padding-bottom: 0.5rem;
    }

    h2 {
        color: #555;
    }

    .error {
        color: #d32f2f;
        font-weight: bold;
    }

    .users-container {
        margin-top: 1rem;
    }

    .users-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 0.5rem;
    }

    .users-table th,
    .users-table td {
        padding: 0.75rem;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }

    .users-table th {
        background-color: #f5f5f5;
        font-weight: bold;
        color: #333;
    }

    .users-table tr:hover {
        background-color: #f9f9f9;
    }
</style>